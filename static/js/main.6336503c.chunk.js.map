{"version":3,"sources":["components/components.tsx","components/UserArea.tsx","lib/Actions.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","react_default","a","createElement","className","Container","children","UserArea","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","e","preventDefault","setState","target","value","handleClick","pState","isNew","_this2","label","concat","to","onSubmit","placeholder","onChange","handleChange","Button","Component","type","xiv","require","Thaliak","haveText","pages","from","HandleClick","bind","assertThisInitialized","Init","undefined","GetText","text","DE","EN","FR","JP","source","ChangeLang","UserArea_UserArea","direction","change","console","error","data","list","then","response","parseInt","Pagination","PageTotal","catch","page","RNG","name","qIndex","Results","Name","ID","get","dIndex","OrderID","TextData","Dialogue","length","Text","Order","AssignText","TextData_de","TextData_en","TextData_fr","TextData_ja","req","Math","floor","random","dialogue","order","index","temp","test","ReplaceCode","toChange","replace","Boolean","window","location","hostname","match","ReactDOM","render","App_Thaliak","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6XAGO,SAASA,EAAQC,GACpB,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,sCAKL,SAASC,EAAWL,GACvB,OACIC,EAAAC,EAAAC,cAAA,YAEKH,EAAMM,cCdEC,cAEjB,SAAAA,EAAYP,GAAU,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KACDe,MAAQ,CAAEC,MAAO,IAFJR,4EAKTQ,EAAaC,GACtBA,EAAEC,iBACFP,KAAKQ,SAAS,CACVH,MAAOC,EAAEG,OAAOC,4CAIZJ,GACRA,EAAEC,iBACFP,KAAKX,MAAMsB,YAAYL,GACnBN,KAAKX,MAAMuB,OAAOC,OAClBb,KAAKQ,SAAS,CAAEH,MAAO,sCAIvB,IAAAS,EAAAd,KACEY,EAASZ,KAAKX,MAAMuB,OACtBP,EAAQL,KAAKI,MAAMC,MACnBU,EAAQH,EAAOC,MAAP,QAAAG,OAAuBJ,EAAOK,IAAO,OAEjD,OACI3B,EAAAC,EAAAC,cAAA,QAAM0B,SAAU,SAACZ,GAAKQ,EAAKH,YAAYL,IAAKb,UAAU,aACjDmB,EAAOC,OACJvB,EAAAC,EAAAC,cAAA,YACIC,UAAU,WACV0B,YAAY,8BACZT,MAAOL,EACPe,SAAU,SAACd,GAAKQ,EAAKO,aAAahB,EAAOC,OAE/CM,EAAOC,OACLvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,SAAIQ,KAAKI,MAAMC,QAIvBf,EAAAC,EAAAC,cAAC8B,EAAD,CAAQP,MAAOA,YA1COQ,aAiDtC,SAASD,EAAQjC,GACb,OACIC,EAAAC,EAAAC,cAAA,UAAQgC,KAAK,SAAS/B,UAAU,UAC3BJ,EAAM0B,OCnDnB,IACMU,EAAM,IADGC,EAAQ,MCIFC,cACnB,SAAAA,EAAYtC,GAAe,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACzB9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAMX,KACDe,MAAQ,CACXS,MAAOhB,EAAKR,MAAMwB,MAClBe,UAAU,EACVC,OAAQ,EACRC,KAAMjC,EAAKR,MAAMyC,KACjBb,GAAIpB,EAAKR,MAAM4B,IAGjBpB,EAAKkC,YAAclC,EAAKkC,YAAYC,KAAjBlC,OAAAmC,EAAA,EAAAnC,CAAAD,IAVMA,mFAczBG,KAAKkC,wCAGC,IAAApB,EAAAd,UACkBmC,IAArBnC,KAAKI,MAAMyB,OACR7B,KAAKI,MAAMyB,MAAQ,GACnB7B,KAAKI,MAAMS,QACVb,KAAKI,MAAMwB,UACd5B,KAAKoC,UAGT,IAAIC,EAAiB,CAAEC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IAC/CC,EAAgB,GAChBjC,EAAgB,GAuBpB,YAtBuB0B,IAApBnC,KAAKI,MAAMiC,OACZA,EAAOrC,KAAKI,MAAMiC,MAEC,OAAlBrC,KAAKI,MAAMa,GACZR,EAAS4B,EAAI,GACa,OAAlBrC,KAAKI,MAAMa,GACnBR,EAAS4B,EAAI,GACa,OAAlBrC,KAAKI,MAAMa,GACnBR,EAAS4B,EAAI,GACa,OAAlBrC,KAAKI,MAAMa,KACnBR,EAAS4B,EAAI,IAEQ,OAApBrC,KAAKI,MAAM0B,KACZY,EAASL,EAAI,GACe,OAApBrC,KAAKI,MAAM0B,KACnBY,EAASL,EAAI,GACe,OAApBrC,KAAKI,MAAM0B,KACnBY,EAASL,EAAI,GACe,OAApBrC,KAAKI,MAAM0B,OACnBY,EAASL,EAAI,IAIb/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACJ,EAAD,MACAE,EAAAC,EAAAC,cAACE,EAAD,KACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,yBACEF,EAAAC,EAAAC,cAAA,UAAQkB,MAAOV,KAAKI,MAAM0B,KAAMV,SAAU,SAACd,GAAD,OAAOQ,EAAK6B,WAAWrC,EAAE,UACjEhB,EAAAC,EAAAC,cAAA,UAAQkB,MAAM,MAAd,YACApB,EAAAC,EAAAC,cAAA,UAAQkB,MAAM,MAAd,WACApB,EAAAC,EAAAC,cAAA,UAAQkB,MAAM,MAAd,gBACApB,EAAAC,EAAAC,cAAA,UAAQkB,MAAM,MAAd,wBAGJpB,EAAAC,EAAAC,cAAA,sBACEF,EAAAC,EAAAC,cAAA,UAAQkB,MAAOV,KAAKI,MAAMa,GAAIG,SAAU,SAACd,GAAD,OAAOQ,EAAK6B,WAAWrC,EAAE,QAC/DhB,EAAAC,EAAAC,cAAA,UAAQkB,MAAM,MAAd,YACApB,EAAAC,EAAAC,cAAA,UAAQkB,MAAM,MAAd,sBACApB,EAAAC,EAAAC,cAAA,UAAQkB,MAAM,MAAd,gBACApB,EAAAC,EAAAC,cAAA,UAAQkB,MAAM,MAAd,cAKNpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACZO,KAAKI,MAAMS,QAAUb,KAAKI,MAAMwB,UAC/BtC,EAAAC,EAAAC,cAAA,uBAEDQ,KAAKI,MAAMwB,UACVtC,EAAAC,EAAAC,cAAA,SAAIkD,IAIRpD,EAAAC,EAAAC,cAACoD,EAAD,CAAUhC,OAAQZ,KAAKI,MAAOO,YAAaX,KAAK+B,cAEhDzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXO,KAAKI,MAAMS,OACXvB,EAAAC,EAAAC,cAAA,SAAIiB,iMDtFJH,GACVA,EAAEC,iBACCP,KAAKI,MAAMS,MAEZb,KAAKQ,SAAS,CAAEK,OAAO,IAIvBb,KAAKQ,SAAS,CAAEK,OAAO,EAAMe,UAAU,uCAIhCtB,EAAuCuC,GAChDvC,EAAEC,iBACF,IAAIuC,EAASxC,EAAEG,OAAOC,MAEL,OAAdmC,EACD7C,KAAKQ,SAAS,CACZS,GAAI6B,IAEiB,SAAdD,EACT7C,KAAKQ,SAAS,CACZsB,KAAMgB,IAIRC,QAAQC,MAAM,uEAIX,IAAAnD,EAAAG,KAELyB,EAAIwB,KAAKC,KAAK,SAASC,KAAK,SAACC,GAG3BvD,EAAKW,SAAS,CACZqB,MAAMwB,SAASD,EAASE,WAAWC,eAEpCC,MAAM,SAACR,GACND,QAAQC,MAAM,oBAAqBA,uCAIhC,IAAAlC,EAAAd,KAEHyD,GAAe,OAGKtB,IAArBnC,KAAKI,MAAMyB,QACZ4B,EAAOzD,KAAK0D,IAAI1D,KAAKI,MAAMyB,OAC3B4B,KAIFhC,EAAIwB,KAAKC,KAAT,cAAAlC,OAA4ByC,IAAQN,KAAK,SAACC,GACxC,IACIO,EADAC,GAAiB,EAGrB,GAEEA,EAAS9C,EAAK4C,IAAIN,EAASE,WAAWO,SAI1B,kBADZF,EAAOP,EAASS,QAAQD,GAAQE,QAE9BH,EAAO,UAEK,KAATA,GAGPC,EAASR,EAASS,QAAQD,GAAQG,GAGlCtC,EAAIwB,KAAKe,IAAI,QAAQJ,GAAQT,KAAK,SAACC,GACjC,IACIa,EADAC,GAAkB,EAGtB,GAEED,EAASnD,EAAK4C,IAAKN,EAASe,SAASC,SAAUC,QAEC,6EAA5CjB,EAASe,SAASC,SAASH,GAAQK,MACS,mCAA5ClB,EAASe,SAASC,SAASH,GAAQK,OACrCJ,EAAUb,SAASD,EAASe,SAASC,SAASH,GAAQM,eAEpC,IAAbL,GAGTpD,EAAKN,SAAS,CACZ6B,KAAM,CACJC,GAAIxB,EAAK0D,WAAWpB,EAASqB,YAAYL,SAAUF,EAASD,GAC5D1B,GAAIzB,EAAK0D,WAAWpB,EAASsB,YAAYN,SAAUF,EAASD,GAC5DzB,GAAI1B,EAAK0D,WAAWpB,EAASuB,YAAYP,SAAUF,EAASD,GAC5DxB,GAAI3B,EAAK0D,WAAWpB,EAASwB,YAAYR,SAAUF,EAASD,IAE9DrC,UAAU,MAIX4B,MAAM,SAACR,GACRD,QAAQC,MAAR,yBAAAhC,OAAuC4C,EAAvC,MAAmDZ,OAGpDQ,MAAM,SAACR,GACRD,QAAQC,MAAR,yBAAAhC,OAAuCyC,EAAvC,MAAiDT,iCAIjD6B,GAEF,OADUC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,uCAIvCI,EAAcC,EAAcC,GACrC,IAAIC,EAAO,GACX,GAAG/B,SAAS4B,EAASE,GAAOZ,SAAWW,EACrCE,EAAOH,EAASE,GAAOb,SAClB,CACLa,EAAQ,EACR,GACK9B,SAAS4B,EAASE,GAAOZ,SAAWW,EACrCE,EAAOH,EAASE,GAAOb,KAEvBa,UAEa,KAATC,GAOV,MAJG,IAAIC,KAAKD,KACVA,EAAOpF,KAAKsF,YAAYF,IAGnBA,sCAGGG,GAKVA,GADAA,GADAA,GADAA,EAAWA,EAASC,QAAQ,kBAAmB,MAC3BA,QAAQ,cAAe,KACvBA,QAAQ,gBAAiB,KACzBA,QAAQ,0CAA2C,IAEpE,kBAAkBH,KAAKE,KAkBxBA,GADAA,GAHAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GAHAA,GAHAA,EAAWA,EAASC,QAAQ,4CAA4C,SAGpDA,QAAQ,qDAAsD,SAG9DA,QAAQ,mDAAoD,SAC5DA,QAAQ,6DAA8D,0BACtEA,QAAQ,gEAAiE,6BACzEA,QAAQ,6DAA8D,2BACtEA,QAAQ,+DAAgE,0BACxEA,QAAQ,kEAAmE,6BAC3EA,QAAQ,+DAAgE,2BAGxEA,QAAQ,kDAAoD,SAC5DA,QAAQ,uDAAwD,iBAGjF,oCAAoCH,KAAKE,KAM1CA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAWA,EAASC,QAAQ,qCAAsC,MAC9CA,QAAQ,eAAgB,uBACxBA,QAAQ,eAAgB,mBACxBA,QAAQ,eAAgB,uBACxBA,QAAQ,sBAAuB,MAC/BA,QAAQ,YAAa,MAI3CD,EAAWA,EAASC,QAAQ,6CAA6C,SAsD3E,MA9CG,uBAAuBH,KAAKE,KAE7BA,GADAA,EAAWA,EAASC,QAFT,2EAEyB,uBAChBA,QALT,gDAKyB,uBAKnC,SAASH,KAAKE,KAOfA,GAFAA,GAHAA,GADAA,EAAWA,EAASC,QAAQ,8BAA8B,qBACtCA,QAAQ,kCAAmC,gBAG3CA,QAAQ,8BAA8B,aAEtCA,QAAQ,2BAA4B,SAIvD,OAAOH,KAAKE,KAabA,GADAA,GADAA,GAFAA,GAFAA,GAFAA,GADAA,GADAA,EAAWA,EAASC,QAAQ,YAAa,MACrBA,QAAQ,sBAAuB,MAC/BA,QAAQ,gBAAiB,MAEzBA,QAAQ,gBAAiB,MAEzBA,QAAQ,kBAAmB,MAE3BA,QAAQ,QAAS,MACjBA,QAAQ,YAAa,MACrBA,QAAQ,UAAW,OAIrC,SAASH,KAAKE,IAAe,SAASF,KAAKE,IAAe,SAASF,KAAKE,IACzE,OAAOF,KAAKE,IAAe,OAAOF,KAAKE,MAKtCA,GADAA,GADAA,GADAA,GADAA,EAAWA,EAASC,QAAQ,UAAW,MACnBA,QAAQ,UAAW,MACnBA,QAAQ,UAAW,MACnBA,QAAQ,QAAS,MACjBA,QAAQ,QAAS,MAGzCD,EAAWA,EAASC,QAAQ,MAAO,kBAnOOjE,cEM1BkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzG,EAAAC,EAAAC,cAACwG,EAAD,CAASnF,OAAO,EAAMiB,KAAK,KAAKb,GAAG,OAASgF,SAASC,eAAe,SDmI9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,KAAK,SAAAmD,GACjCA,EAAaC","file":"static/js/main.6336503c.chunk.js","sourcesContent":["import '../App.css'\r\nimport React from 'react'\r\n\r\nexport function Header (props:any) {\r\n    return (\r\n        <header>\r\n            <h1>Thaliak's Translations</h1>\r\n            <span className=\"Subtext\">A FFXIV Translation Practice Tool</span>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport function Container (props:any) {\r\n    return (\r\n        <main>\r\n\r\n            {props.children}\r\n\r\n        </main>\r\n    )\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class UserArea extends Component<any, any> {\r\n\r\n    constructor(props:any){\r\n        super(props)\r\n        this.state = { input: \"\" }\r\n    }\r\n\r\n    handleChange(input:string,e:React.ChangeEvent<HTMLTextAreaElement>){\r\n        e.preventDefault();\r\n        this.setState({\r\n            input: e.target.value\r\n        });\r\n    }\r\n\r\n    handleClick(e:React.FormEvent<HTMLFormElement>){\r\n        e.preventDefault();\r\n        this.props.handleClick(e);\r\n        if(!this.props.pState.isNew){\r\n            this.setState({ input: \"\" });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const pState = this.props.pState;\r\n        let input = this.state.input;\r\n        let label = pState.isNew ? `Show ${pState.to}` : \"Next\";\r\n        \r\n        return(\r\n            <form onSubmit={(e)=>{this.handleClick(e)}} className=\"UserInput\">\r\n                {pState.isNew &&\r\n                    <textarea\r\n                        className=\"UserText\"\r\n                        placeholder=\"Type your translation here.\"\r\n                        value={input}\r\n                        onChange={(e)=>{this.handleChange(input, e)}} />\r\n                }\r\n                {!pState.isNew &&\r\n                    <div className=\"UserText\">\r\n                        <p>{this.state.input}</p>\r\n                    </div>\r\n                }\r\n                \r\n                <Button label={label} />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n// Button is only used by UserArea, so does not get exported.\r\nfunction Button (props:any) {\r\n    return(\r\n        <button type=\"submit\" className=\"Button\">\r\n            {props.label}\r\n        </button>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { AppState } from './types';\r\n\r\nconst XIVAPI = require('xivapi-js');\r\nconst xiv = new XIVAPI();\r\n\r\nexport default abstract class Actions extends Component<AppState,AppState> {\r\n\r\n  HandleClick(e:React.FormEvent<HTMLFormElement>){\r\n    e.preventDefault();\r\n    if(this.state.isNew){\r\n      // button click while NEW changes state to NOT NEW\r\n      this.setState({ isNew: false });\r\n    } else {\r\n      // button click while NOT NEW changes state to new\r\n      // also change haveText to false to allow retrieving new text\r\n      this.setState({ isNew: true, haveText: false });\r\n    }\r\n  }\r\n\r\n  ChangeLang(e:React.ChangeEvent<HTMLSelectElement>,direction:string){\r\n    e.preventDefault();\r\n    let change = e.target.value;\r\n\r\n    if(direction === \"to\"){\r\n      this.setState({\r\n        to: change\r\n      });\r\n    } else if (direction === \"from\"){\r\n      this.setState({\r\n        from: change\r\n      });\r\n    } else {\r\n      // This should never fire since I have it hardcoded.\r\n      console.error(\"Error: Language direction not found.\")\r\n    }\r\n  }\r\n\r\n  Init() {\r\n    // call the API to retrieve a list from the \"Quest\" content\r\n    xiv.data.list(\"Quest\").then((response:any) => {\r\n      // set the state to have the correct number of pages\r\n      // this will allow the render to call GetText()\r\n      this.setState({\r\n        pages:parseInt(response.Pagination.PageTotal)\r\n      });\r\n    }).catch((error:Error) => {\r\n        console.error(\"Error in Init(): \", error);\r\n    })\r\n  }\r\n\r\n  GetText(){\r\n    // Fetch new quest text from XIVAPI\r\n    let page:number = -1;\r\n    \r\n    // get a random PAGE number\r\n    if(this.state.pages !== undefined){\r\n      page = this.RNG(this.state.pages);\r\n      page++;\r\n    }\r\n    \r\n    // Ask the API for the random PAGE's list\r\n    xiv.data.list(`Quest?page=${page}`).then((response:any) => {\r\n      let qIndex:number = -1;\r\n      let name:string;\r\n\r\n      do {\r\n        // get a random ITEM number based on how many results are on the page\r\n        qIndex = this.RNG(response.Pagination.Results);\r\n        \r\n        // check the name value from the list to remove invalid possibilities\r\n        name = response.Results[qIndex].Name;\r\n        if(name === \"Testdfghjkl;\"){\r\n          name = \"\";\r\n        }\r\n      }while(name === \"\")\r\n\r\n      // once the name value is OK, update `qIndex` to store the Quest's ID\r\n      qIndex = response.Results[qIndex].ID;\r\n\r\n      // use the item ID to get details about that Quest\r\n      xiv.data.get(\"Quest\",qIndex).then((response:any) => {\r\n        let OrderID:number = -1;\r\n        let dIndex:number;\r\n        \r\n        do{\r\n          // get a random DIALOGUE index number\r\n          dIndex = this.RNG((response.TextData.Dialogue).length);\r\n          // check if the text was marked for deletion\r\n          if((response.TextData.Dialogue[dIndex].Text !== \"（★未使用／削除予定★）\") ||\r\n             (response.TextData.Dialogue[dIndex].Text !== \"（カット）\")){\r\n            OrderID = parseInt(response.TextData.Dialogue[dIndex].Order);\r\n          }\r\n        } while (OrderID === -1);\r\n\r\n        // assign strings to state & set haveText to true\r\n        this.setState({\r\n          text: {\r\n            DE: this.AssignText(response.TextData_de.Dialogue, OrderID, dIndex),\r\n            EN: this.AssignText(response.TextData_en.Dialogue, OrderID, dIndex),\r\n            FR: this.AssignText(response.TextData_fr.Dialogue, OrderID, dIndex),\r\n            JP: this.AssignText(response.TextData_ja.Dialogue, OrderID, dIndex)\r\n          },\r\n          haveText: true\r\n        });\r\n        \r\n      // close out individual quest retrieval\r\n      }).catch((error:Error) => {\r\n        console.error(`Error in getting item ${qIndex}: `, error)\r\n      })\r\n    // close out the list retrieval\r\n    }).catch((error:Error) => {\r\n      console.error(`Error in getting page ${page}: `, error);\r\n    })\r\n  }\r\n\r\n  RNG(req:number):number{\r\n    let res = Math.floor(Math.random() * Math.floor(req));\r\n    return res;\r\n  }\r\n\r\n  AssignText(dialogue:any, order:number, index:number):string{\r\n    let temp = \"\";\r\n    if(parseInt(dialogue[index].Order) === order){\r\n      temp = dialogue[index].Text;\r\n    } else {\r\n      index = 0;\r\n      do {\r\n        if(parseInt(dialogue[index].Order) === order){\r\n          temp = dialogue[index].Text;\r\n        } else {\r\n          index++;\r\n        }\r\n      } while(temp === \"\");\r\n    }\r\n\r\n    if(/</.test(temp)){\r\n      temp = this.ReplaceCode(temp);\r\n    }\r\n    \r\n    return temp;\r\n  }\r\n  \r\n  ReplaceCode(toChange:string):string{\r\n    // basic replacements/removals\r\n    toChange = toChange.replace(/<SoftHyphen\\/>/g, \"-\"); // Soft Hyphen code: \\u00AD\r\n    toChange = toChange.replace(/<Indent\\/>/g, \"\");\r\n    toChange = toChange.replace(/<.?Emphasis>/g, \"\");\r\n    toChange = toChange.replace(/<UIForeground>.?[0-9]*<\\/UIForeground>/g, \"\");\r\n\r\n    if(/PlayerParameter/.test(toChange)){\r\n      // Fix display of gendered text\r\n      toChange = toChange.replace(/<If.{0,7}\\(PlayerParameter\\(4\\).{0,3}\\)>/g,\"<If>\");\r\n\r\n      // Fix display of time-relative text\r\n      toChange = toChange.replace(/<If\\(LessThan\\(PlayerParameter\\(11\\),\\d{1,3}\\)\\)>/g, \"<If>\");\r\n      \r\n      // Fix display of PlayerParameter(52-54), which handle GC\r\n      toChange = toChange.replace(/<If\\(GreaterThan\\(PlayerParameter\\(5\\d\\),0\\)\\)>/g, \"<If>\");\r\n      toChange = toChange.replace(/<Sheet\\(GCRankLimsaMaleText,PlayerParameter\\(52\\),\\d\\)\\/>/g, \"[[♂ Limsa Rank]]\");\r\n      toChange = toChange.replace(/<Sheet\\(GCRankGridaniaMaleText,PlayerParameter\\(53\\),\\d\\)\\/>/g, \"[[♂ Gridania Rank]]\");\r\n      toChange = toChange.replace(/<Sheet\\(GCRankUldahMaleText,PlayerParameter\\(54\\),\\d\\)\\/>/g, \"[[♂ Ul'dah Rank]]\");\r\n      toChange = toChange.replace(/<Sheet\\(GCRankLimsaFemaleText,PlayerParameter\\(52\\),\\d\\)\\/>/g, \"[[♀ Limsa Rank]]\");\r\n      toChange = toChange.replace(/<Sheet\\(GCRankGridaniaFemaleText,PlayerParameter\\(53\\),\\d\\)\\/>/g, \"[[♀ Gridania Rank]]\");\r\n      toChange = toChange.replace(/<Sheet\\(GCRankUldahFemaleText,PlayerParameter\\(54\\),\\d\\)\\/>/g, \"[[♀ Ul'dah Rank]]\");\r\n      \r\n      // Fix display of PlayerParameter(68), which references current job\r\n      toChange = toChange.replace(/<If\\(Equal\\(PlayerParameter\\(68\\),\\d{0,2}\\)\\)>/g,  \"<If>\");\r\n      toChange = toChange.replace(/<Sheet\\(ClassJob,PlayerParameter\\(68\\),\\d{0,2}\\)\\/>/g, \"[[class/job]]\");\r\n\r\n      // Fix 71 (Starting City - 1: Limsa/Ul'dah; 2: Gridania; 3: Limsa/Ul'dah)\r\n      if(/<Switch\\(PlayerParameter\\(70\\)\\)>/.test(toChange)){\r\n        toChange = toChange.replace(/<Switch\\(PlayerParameter\\(70\\)\\)>/g, \"(\");\r\n        toChange = toChange.replace(/<Case\\(1\\)>/g, \" [[Limsa/Ul'dah]] \");\r\n        toChange = toChange.replace(/<Case\\(2\\)>/g, \" [[Gridania]] \");\r\n        toChange = toChange.replace(/<Case\\(3\\)>/g, \" [[Limsa/Ul'dah]] \");\r\n        toChange = toChange.replace(/<\\/Case><\\/Switch>/g, \")\");\r\n        toChange = toChange.replace(/<\\/Case>/g, \"/\")\r\n      }\r\n\r\n      // Fix display of racial text\r\n      toChange = toChange.replace(/<If.{0,6}\\(PlayerParameter\\(71\\).{0,4}\\)>/g,\"<If>\");\r\n    }\r\n    \r\n    // change character name code to [[character name]]\r\n    // cNameS is for when the code would display a character's full name\r\n    let cNameS = /<Highlight>ObjectParameter\\(1\\)<\\/Highlight>/g;\r\n    // cNameL is for when the code would display first OR last name\r\n    let cNameL = /<Split\\(<Highlight>ObjectParameter\\(1\\)<\\/Highlight>,.{0,3},.{0,3}\\)\\/>/g;\r\n    if(/ObjectParameter\\(1\\)/.test(toChange)){\r\n      toChange = toChange.replace(cNameL, \"[[character name]]\");\r\n      toChange = toChange.replace(cNameS, \"[[character name]]\");\r\n    }\r\n    \r\n\r\n    // Fix display of things that reference other sheets\r\n    if(/<Sheet/.test(toChange)){\r\n      toChange = toChange.replace(/<Sheet.{0,4}EObj.{6,18}\\/>/g,\"[[Event Object]]\");\r\n      toChange = toChange.replace(/<Sheet.{0,4}BNpcName.{6,18}\\/>/g, \"[[monster]]\");\r\n      // This Regex allows more text in front than the previous two\r\n      // Because I want it to also catch EventItem\r\n      toChange = toChange.replace(/<Sheet.{0,9}Item.{6,18}\\/>/g,\"[[item]]\");\r\n      // Sometimes gendered language shows up for item/monster names; prepare for fix\r\n      toChange = toChange.replace(/<If\\(\\[\\[.{1,13}\\]\\]\\)>/g, \"<If>\");\r\n    }\r\n\r\n    // Fix any If/Else blocks that were prepared by previous replaces\r\n    if(/<If>/.test(toChange)){\r\n      // Replaces for nested If blocks so they also look good\r\n      // This was built specifically for time checks, but may also work for Class/Job blocks\r\n      toChange = toChange.replace(/<If><If>/g, \"(\");\r\n      toChange = toChange.replace(/<\\/If><Else\\/><If>/g, \"/\");\r\n      toChange = toChange.replace(/<\\/If><\\/If>/g, \")\");\r\n      // Opening for when true is empty\r\n      toChange = toChange.replace(/<If><Else\\/>/g, \"(\");\r\n      // Closing for when false is empty\r\n      toChange = toChange.replace(/<Else\\/><\\/If>/g, \")\");\r\n      // Replace any remaining individual tags\r\n      toChange = toChange.replace(/<If>/g, \"(\");\r\n      toChange = toChange.replace(/<Else\\/>/g, \"/\");\r\n      toChange = toChange.replace(/<\\/If>/g, \")\");\r\n    }\r\n\r\n    // Cleanup for messy if blocks - remove duplicate ( / ) characters\r\n    if((/\\({2,}/.test(toChange)) || (/\\/{2,}/.test(toChange)) || (/\\){2,}/.test(toChange)) || \r\n      (/\\)\\//.test(toChange)) || (/\\/\\(/.test(toChange))){\r\n        toChange = toChange.replace(/\\({2,}/g, \"(\"); // 2 or more ( with a single (\r\n        toChange = toChange.replace(/\\/{2,}/g, \"/\"); // 2 or more / with a single /\r\n        toChange = toChange.replace(/\\){2,}/g, \")\"); // 2 or more ) with a single )\r\n        toChange = toChange.replace(/\\)\\//g, \"/\"); // )/ with a single /\r\n        toChange = toChange.replace(/\\/\\(/g, \"/\"); // /( with a single /\r\n    }\r\n    // add a zero-width space to the right of any / character to allow for line breaks\r\n    toChange = toChange.replace(/\\//g, \"/\\u200B\");\r\n    \r\n    return toChange;\r\n  }\r\n}","import React from 'react';\r\nimport * as Comp from './components/components'\r\nimport UserArea from './components/UserArea'\r\nimport './App.css';\r\nimport Actions from './lib/Actions'\r\nimport { AppState, Languages } from './lib/types'\r\n\r\nexport default class Thaliak extends Actions {\r\n  constructor(props:AppState){\r\n    super(props)\r\n    this.state = {\r\n      isNew: this.props.isNew,\r\n      haveText: false,\r\n      pages: -1,\r\n      from: this.props.from,\r\n      to: this.props.to\r\n    }\r\n    \r\n    this.HandleClick = this.HandleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.Init();\r\n  }\r\n\r\n  render(){\r\n    if(this.state.pages !== undefined){\r\n      if((this.state.pages > 0) && \r\n          this.state.isNew && \r\n          !this.state.haveText){\r\n        this.GetText();\r\n      }\r\n    }\r\n    let text:Languages = { DE: \"\", EN: \"\", FR: \"\", JP: \"\"};\r\n    let source:string = \"\";\r\n    let target:string = \"\";\r\n    if(this.state.text !== undefined){\r\n      text = this.state.text;\r\n    }\r\n    if(this.state.to === \"EN\"){\r\n      target = text[\"EN\"];\r\n    } else if(this.state.to === \"JP\"){\r\n      target = text[\"JP\"];\r\n    } else if(this.state.to === \"FR\"){\r\n      target = text[\"FR\"];\r\n    } else if(this.state.to === \"DE\"){\r\n      target = text[\"DE\"];\r\n    }\r\n    if(this.state.from === \"EN\"){\r\n      source = text[\"EN\"];\r\n    } else if(this.state.from === \"JP\") {\r\n      source = text[\"JP\"];\r\n    } else if(this.state.from === \"FR\") {\r\n      source = text[\"FR\"];\r\n    } else if(this.state.from === \"DE\") {\r\n      source = text[\"DE\"];\r\n    }\r\n\r\n    return(\r\n      <div className=\"ContentContainer\">\r\n        <Comp.Header />\r\n        <Comp.Container>\r\n          <div className=\"LanguageSelector\">\r\n            <label>Translate\r\n              <select value={this.state.from} onChange={(e) => this.ChangeLang(e,\"from\")}>\r\n                <option value=\"DE\">deutsche</option>\r\n                <option value=\"EN\">English</option>\r\n                <option value=\"FR\">Française</option>\r\n                <option value=\"JP\">日本語</option>\r\n              </select>\r\n            </label>\r\n            <label>➔\r\n              <select value={this.state.to} onChange={(e) => this.ChangeLang(e,\"to\")}>\r\n                <option value=\"DE\">deutsche</option>\r\n                <option value=\"JP\">日本語</option>\r\n                <option value=\"FR\">Française</option>\r\n                <option value=\"EN\">English</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n\r\n          <div className=\"OfficialText SourceText\">\r\n            {this.state.isNew && !this.state.haveText &&\r\n              <p>Loading...</p>\r\n            }\r\n            {this.state.haveText &&\r\n              <p>{source}</p>\r\n            }\r\n          </div>\r\n\r\n          <UserArea pState={this.state} handleClick={this.HandleClick} />\r\n\r\n          <div className=\"OfficialText TargetText\">\r\n            {!this.state.isNew &&\r\n              <p>{target}</p>\r\n            }\r\n          </div>\r\n          \r\n        </Comp.Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Thaliak from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Thaliak isNew={true} from=\"JP\" to=\"EN\" />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}